ilxr
========

A simple bash script to help install ilixi and its dependencies on your host machine.

Visit http://www.ilixi.org for more info.

ilxr only supports Makefile and autotools based packages for now. CMake support will be added soon.

Please submit bugs to <tarik@ilixi.org>.



Running ilxr
--------
By default ilxr will use "slim-latest.ilxr" recipe and start a build with 8 jobs. You can change this behaviour either by editing ilxr source or command line options. To get a list of available options type:
./ilxr.sh -h 

For example, to build and install ilixi with multi-application core support, using 4 jobs, type:
./ilxr.sh -j 4 -p multi-latest.ilxr

Source files are downloaded to "./ilxr/dl/", then copied to "./ilxr/ws/" for a build to start. Once the build is completed, files are installed to "./ilxr/install/". Note that output of each operation is stored in "./ilxr/log/".


How to add new packages
--------

ilxr includes example software stacks (recipes) for single (slim) and multiple (multi) application use cases. These are located in "./data/default/". It should give you an idea :)

A package is defined using square brackets and can have the following key, value pairs:
* source - path to a git repository or tarball
* patch - list of patches to apply. use spaces to have more than one patch. patches are searched in /data/patch/<name> directory.
* depends - list of dependencies which are installed using distro's package manager.
* autoconf - If set to "yes", ilxr runs autoconf utils to create a configure script for package
* autoconf_options - list of configuration options for autoconf based package.
* cmake_options - list of configuration options for cmake based package.
* sudo_install - package is installed using sudo. only required for system wide packages.
* pre_build - space separated list of helper scripts to run before build. scripts are searched in <recipe_dir>.
* post_install - space separated list of scripts to run after install. scripts are searched in <recipe_dir>.
* files - list of files to copy

How to use installed packages
-----------------------------
You can specify a custom install directory using "-o <path>".

Before building your own packages you can set following:

	export LD_LIBRARY_PATH=<path>/lib/:$LD_LIBRARY_PATH
	export PKG_CONFIG_PATH=<path>/lib/pkgconfig/
	export PATH=<path>/bin:$PATH

